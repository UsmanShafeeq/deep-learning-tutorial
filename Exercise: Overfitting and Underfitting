{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ae8b15ab",
   "metadata": {
    "papermill": {
     "duration": 0.006508,
     "end_time": "2024-08-26T07:18:14.454143",
     "exception": false,
     "start_time": "2024-08-26T07:18:14.447635",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Intro to Deep Learning](https://www.kaggle.com/learn/intro-to-deep-learning) course.  You can reference the tutorial at [this link](https://www.kaggle.com/ryanholbrook/overfitting-and-underfitting).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9efbbae",
   "metadata": {
    "papermill": {
     "duration": 0.00589,
     "end_time": "2024-08-26T07:18:14.466032",
     "exception": false,
     "start_time": "2024-08-26T07:18:14.460142",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction #\n",
    "\n",
    "In this exercise, youâ€™ll learn how to improve training outcomes by including an early stopping callback to prevent overfitting.\n",
    "\n",
    "When you're ready, run this next cell to set everything up!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f808fb32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T07:18:14.479799Z",
     "iopub.status.busy": "2024-08-26T07:18:14.479050Z",
     "iopub.status.idle": "2024-08-26T07:18:15.265001Z",
     "shell.execute_reply": "2024-08-26T07:18:15.264146Z"
    },
    "papermill": {
     "duration": 0.795415,
     "end_time": "2024-08-26T07:18:15.267330",
     "exception": false,
     "start_time": "2024-08-26T07:18:14.471915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_27/1500229236.py:3: MatplotlibDeprecationWarning: The seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-<style>'. Alternatively, directly use the seaborn API instead.\n",
      "  plt.style.use('seaborn-whitegrid')\n"
     ]
    }
   ],
   "source": [
    "# Setup plotting\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('seaborn-whitegrid')\n",
    "# Set Matplotlib defaults\n",
    "plt.rc('figure', autolayout=True)\n",
    "plt.rc('axes', labelweight='bold', labelsize='large',\n",
    "       titleweight='bold', titlesize=18, titlepad=10)\n",
    "plt.rc('animation', html='html5')\n",
    "\n",
    "# Setup feedback system\n",
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.deep_learning_intro.ex4 import *"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f2436f5",
   "metadata": {
    "papermill": {
     "duration": 0.006108,
     "end_time": "2024-08-26T07:18:15.279802",
     "exception": false,
     "start_time": "2024-08-26T07:18:15.273694",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "First load the *Spotify* dataset. Your task will be to predict the popularity of a song based on various audio features, like `'tempo'`, `'danceability'`, and `'mode'`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f7f9ddab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T07:18:15.293171Z",
     "iopub.status.busy": "2024-08-26T07:18:15.292803Z",
     "iopub.status.idle": "2024-08-26T07:18:29.303757Z",
     "shell.execute_reply": "2024-08-26T07:18:29.301914Z"
    },
    "papermill": {
     "duration": 14.020299,
     "end_time": "2024-08-26T07:18:29.306118",
     "exception": false,
     "start_time": "2024-08-26T07:18:15.285819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-26 07:18:18.091550: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-08-26 07:18:18.091655: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-08-26 07:18:18.217987: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input shape: [18]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.compose import make_column_transformer\n",
    "from sklearn.model_selection import GroupShuffleSplit\n",
    "\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.keras import callbacks\n",
    "\n",
    "spotify = pd.read_csv('../input/dl-course-data/spotify.csv')\n",
    "\n",
    "X = spotify.copy().dropna()\n",
    "y = X.pop('track_popularity')\n",
    "artists = X['track_artist']\n",
    "\n",
    "features_num = ['danceability', 'energy', 'key', 'loudness', 'mode',\n",
    "                'speechiness', 'acousticness', 'instrumentalness',\n",
    "                'liveness', 'valence', 'tempo', 'duration_ms']\n",
    "features_cat = ['playlist_genre']\n",
    "\n",
    "preprocessor = make_column_transformer(\n",
    "    (StandardScaler(), features_num),\n",
    "    (OneHotEncoder(), features_cat),\n",
    ")\n",
    "\n",
    "# We'll do a \"grouped\" split to keep all of an artist's songs in one\n",
    "# split or the other. This is to help prevent signal leakage.\n",
    "def group_split(X, y, group, train_size=0.75):\n",
    "    splitter = GroupShuffleSplit(train_size=train_size)\n",
    "    train, test = next(splitter.split(X, y, groups=group))\n",
    "    return (X.iloc[train], X.iloc[test], y.iloc[train], y.iloc[test])\n",
    "\n",
    "X_train, X_valid, y_train, y_valid = group_split(X, y, artists)\n",
    "\n",
    "X_train = preprocessor.fit_transform(X_train)\n",
    "X_valid = preprocessor.transform(X_valid)\n",
    "y_train = y_train / 100 # popularity is on a scale 0-100, so this rescales to 0-1.\n",
    "y_valid = y_valid / 100\n",
    "\n",
    "input_shape = [X_train.shape[1]]\n",
    "print(\"Input shape: {}\".format(input_shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09b76e18",
   "metadata": {
    "papermill": {
     "duration": 0.006485,
     "end_time": "2024-08-26T07:18:29.319507",
     "exception": false,
     "start_time": "2024-08-26T07:18:29.313022",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's start with the simplest network, a linear model. This model has low capacity.\n",
    "\n",
    "Run this next cell without any changes to train a linear model on the *Spotify* dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3c5bcd99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T07:18:29.336764Z",
     "iopub.status.busy": "2024-08-26T07:18:29.335222Z",
     "iopub.status.idle": "2024-08-26T07:18:38.438406Z",
     "shell.execute_reply": "2024-08-26T07:18:38.437464Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 9.114316,
     "end_time": "2024-08-26T07:18:38.440406",
     "exception": false,
     "start_time": "2024-08-26T07:18:29.326090",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1724656711.292177      69 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum Validation Loss: 0.1965\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = keras.Sequential([\n",
    "    layers.Dense(1, input_shape=input_shape),\n",
    "])\n",
    "model.compile(\n",
    "    optimizer='adam',\n",
    "    loss='mae',\n",
    ")\n",
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    validation_data=(X_valid, y_valid),\n",
    "    batch_size=512,\n",
    "    epochs=50,\n",
    "    verbose=0, # suppress output since we'll plot the curves\n",
    ")\n",
    "history_df = pd.DataFrame(history.history)\n",
    "history_df.loc[0:, ['loss', 'val_loss']].plot()\n",
    "print(\"Minimum Validation Loss: {:0.4f}\".format(history_df['val_loss'].min()));"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e4d16e2",
   "metadata": {
    "papermill": {
     "duration": 0.006657,
     "end_time": "2024-08-26T07:18:38.453966",
     "exception": false,
     "start_time": "2024-08-26T07:18:38.447309",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It's not uncommon for the curves to follow a \"hockey stick\" pattern like you see here. This makes the final part of training hard to see, so let's start at epoch 10 instead:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "890de4ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T07:18:38.468679Z",
     "iopub.status.busy": "2024-08-26T07:18:38.468353Z",
     "iopub.status.idle": "2024-08-26T07:18:38.799576Z",
     "shell.execute_reply": "2024-08-26T07:18:38.798619Z"
    },
    "papermill": {
     "duration": 0.340882,
     "end_time": "2024-08-26T07:18:38.801670",
     "exception": false,
     "start_time": "2024-08-26T07:18:38.460788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum Validation Loss: 0.1965\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Start the plot at epoch 10\n",
    "history_df.loc[10:, ['loss', 'val_loss']].plot()\n",
    "print(\"Minimum Validation Loss: {:0.4f}\".format(history_df['val_loss'].min()));"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47934c8e",
   "metadata": {
    "papermill": {
     "duration": 0.007936,
     "end_time": "2024-08-26T07:18:38.817002",
     "exception": false,
     "start_time": "2024-08-26T07:18:38.809066",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1) Evaluate Baseline\n",
    "\n",
    "What do you think? Would you say this model is underfitting, overfitting, just right?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8c3faaa6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T07:18:38.832792Z",
     "iopub.status.busy": "2024-08-26T07:18:38.832460Z",
     "iopub.status.idle": "2024-08-26T07:18:38.839872Z",
     "shell.execute_reply": "2024-08-26T07:18:38.839040Z"
    },
    "papermill": {
     "duration": 0.017714,
     "end_time": "2024-08-26T07:18:38.841866",
     "exception": false,
     "start_time": "2024-08-26T07:18:38.824152",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"1_Q1\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "The gap between these curves is quite small and the validation loss never increases, so it's more likely that the network is underfitting than overfitting. It would be worth experimenting with more capacity to see if that's the case."
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "The gap between these curves is quite small and the validation loss never increases, so it's more likely that the network is underfitting than overfitting. It would be worth experimenting with more capacity to see if that's the case."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# View the solution (Run this cell to receive credit!)\n",
    "q_1.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "078dbb42",
   "metadata": {
    "papermill": {
     "duration": 0.007175,
     "end_time": "2024-08-26T07:18:38.856538",
     "exception": false,
     "start_time": "2024-08-26T07:18:38.849363",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now let's add some capacity to our network. We'll add three hidden layers with 128 units each. Run the next cell to train the network and see the learning curves."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cbc69b96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T07:18:38.872978Z",
     "iopub.status.busy": "2024-08-26T07:18:38.872673Z",
     "iopub.status.idle": "2024-08-26T07:18:49.288054Z",
     "shell.execute_reply": "2024-08-26T07:18:49.287112Z"
    },
    "papermill": {
     "duration": 10.425984,
     "end_time": "2024-08-26T07:18:49.290136",
     "exception": false,
     "start_time": "2024-08-26T07:18:38.864152",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "49/49 [==============================] - 2s 6ms/step - loss: 0.2638 - val_loss: 0.2121\n",
      "Epoch 2/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.2024 - val_loss: 0.2049\n",
      "Epoch 3/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1968 - val_loss: 0.2022\n",
      "Epoch 4/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1940 - val_loss: 0.2020\n",
      "Epoch 5/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1919 - val_loss: 0.2009\n",
      "Epoch 6/50\n",
      "49/49 [==============================] - 0s 4ms/step - loss: 0.1901 - val_loss: 0.2001\n",
      "Epoch 7/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1886 - val_loss: 0.1984\n",
      "Epoch 8/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1876 - val_loss: 0.1993\n",
      "Epoch 9/50\n",
      "49/49 [==============================] - 0s 4ms/step - loss: 0.1866 - val_loss: 0.1990\n",
      "Epoch 10/50\n",
      "49/49 [==============================] - 0s 4ms/step - loss: 0.1864 - val_loss: 0.2002\n",
      "Epoch 11/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1849 - val_loss: 0.1984\n",
      "Epoch 12/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1842 - val_loss: 0.1979\n",
      "Epoch 13/50\n",
      "49/49 [==============================] - 0s 4ms/step - loss: 0.1833 - val_loss: 0.1986\n",
      "Epoch 14/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1831 - val_loss: 0.2003\n",
      "Epoch 15/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1827 - val_loss: 0.1997\n",
      "Epoch 16/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1816 - val_loss: 0.1986\n",
      "Epoch 17/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1812 - val_loss: 0.1988\n",
      "Epoch 18/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1802 - val_loss: 0.1999\n",
      "Epoch 19/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1795 - val_loss: 0.1987\n",
      "Epoch 20/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1787 - val_loss: 0.2002\n",
      "Epoch 21/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1787 - val_loss: 0.2001\n",
      "Epoch 22/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1780 - val_loss: 0.2006\n",
      "Epoch 23/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1776 - val_loss: 0.2007\n",
      "Epoch 24/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1767 - val_loss: 0.2003\n",
      "Epoch 25/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1767 - val_loss: 0.1998\n",
      "Epoch 26/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1763 - val_loss: 0.2007\n",
      "Epoch 27/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1757 - val_loss: 0.2002\n",
      "Epoch 28/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1754 - val_loss: 0.2016\n",
      "Epoch 29/50\n",
      "49/49 [==============================] - 0s 4ms/step - loss: 0.1745 - val_loss: 0.2010\n",
      "Epoch 30/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1745 - val_loss: 0.2016\n",
      "Epoch 31/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1741 - val_loss: 0.2032\n",
      "Epoch 32/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1734 - val_loss: 0.2024\n",
      "Epoch 33/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1724 - val_loss: 0.2021\n",
      "Epoch 34/50\n",
      "49/49 [==============================] - 0s 4ms/step - loss: 0.1720 - val_loss: 0.2032\n",
      "Epoch 35/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1712 - val_loss: 0.2025\n",
      "Epoch 36/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1710 - val_loss: 0.2028\n",
      "Epoch 37/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1715 - val_loss: 0.2026\n",
      "Epoch 38/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1702 - val_loss: 0.2037\n",
      "Epoch 39/50\n",
      "49/49 [==============================] - 0s 4ms/step - loss: 0.1703 - val_loss: 0.2044\n",
      "Epoch 40/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1696 - val_loss: 0.2038\n",
      "Epoch 41/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1696 - val_loss: 0.2042\n",
      "Epoch 42/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1685 - val_loss: 0.2036\n",
      "Epoch 43/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1685 - val_loss: 0.2043\n",
      "Epoch 44/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1687 - val_loss: 0.2043\n",
      "Epoch 45/50\n",
      "49/49 [==============================] - 0s 4ms/step - loss: 0.1681 - val_loss: 0.2059\n",
      "Epoch 46/50\n",
      "49/49 [==============================] - 0s 4ms/step - loss: 0.1673 - val_loss: 0.2053\n",
      "Epoch 47/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1664 - val_loss: 0.2054\n",
      "Epoch 48/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1664 - val_loss: 0.2061\n",
      "Epoch 49/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1661 - val_loss: 0.2054\n",
      "Epoch 50/50\n",
      "49/49 [==============================] - 0s 4ms/step - loss: 0.1653 - val_loss: 0.2057\n",
      "Minimum Validation Loss: 0.1979\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = keras.Sequential([\n",
    "    layers.Dense(128, activation='relu', input_shape=input_shape),\n",
    "    layers.Dense(64, activation='relu'),\n",
    "    layers.Dense(1)\n",
    "])\n",
    "model.compile(\n",
    "    optimizer='adam',\n",
    "    loss='mae',\n",
    ")\n",
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    validation_data=(X_valid, y_valid),\n",
    "    batch_size=512,\n",
    "    epochs=50,\n",
    ")\n",
    "history_df = pd.DataFrame(history.history)\n",
    "history_df.loc[:, ['loss', 'val_loss']].plot()\n",
    "print(\"Minimum Validation Loss: {:0.4f}\".format(history_df['val_loss'].min()));"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85c4618e",
   "metadata": {
    "papermill": {
     "duration": 0.026912,
     "end_time": "2024-08-26T07:18:49.344705",
     "exception": false,
     "start_time": "2024-08-26T07:18:49.317793",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2) Add Capacity\n",
    "\n",
    "What is your evaluation of these curves? Underfitting, overfitting, just right?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "95c89873",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T07:18:49.401773Z",
     "iopub.status.busy": "2024-08-26T07:18:49.400883Z",
     "iopub.status.idle": "2024-08-26T07:18:49.408802Z",
     "shell.execute_reply": "2024-08-26T07:18:49.407931Z"
    },
    "papermill": {
     "duration": 0.038434,
     "end_time": "2024-08-26T07:18:49.410849",
     "exception": false,
     "start_time": "2024-08-26T07:18:49.372415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"2_Q2\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "Now the validation loss begins to rise very early, while the training loss continues to decrease. This indicates that the network has begun to overfit. At this point, we would need to try something to prevent it, either by reducing the number of units or through a method like early stopping. (We'll see another in the next lesson!)"
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "Now the validation loss begins to rise very early, while the training loss continues to decrease. This indicates that the network has begun to overfit. At this point, we would need to try something to prevent it, either by reducing the number of units or through a method like early stopping. (We'll see another in the next lesson!)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# View the solution (Run this cell to receive credit!)\n",
    "q_2.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0e81f4b",
   "metadata": {
    "papermill": {
     "duration": 0.02757,
     "end_time": "2024-08-26T07:18:49.466491",
     "exception": false,
     "start_time": "2024-08-26T07:18:49.438921",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3) Define Early Stopping Callback\n",
    "\n",
    "Now define an early stopping callback that waits 5 epochs (`patience'`) for a change in validation loss of at least `0.001` (`min_delta`) and keeps the weights with the best loss (`restore_best_weights`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d12df70d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T07:18:49.524278Z",
     "iopub.status.busy": "2024-08-26T07:18:49.523912Z",
     "iopub.status.idle": "2024-08-26T07:18:49.532586Z",
     "shell.execute_reply": "2024-08-26T07:18:49.531718Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.039949,
     "end_time": "2024-08-26T07:18:49.534537",
     "exception": false,
     "start_time": "2024-08-26T07:18:49.494588",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_Q3\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from tensorflow.keras import callbacks\n",
    "\n",
    "# YOUR CODE HERE: define an early stopping callback\n",
    "early_stopping = callbacks.EarlyStopping(\n",
    "    patience=5,\n",
    "    min_delta=0.001,\n",
    "    restore_best_weights=True,\n",
    ")\n",
    "\n",
    "# Check your answer\n",
    "q_3.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "75b97844",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T07:18:49.591793Z",
     "iopub.status.busy": "2024-08-26T07:18:49.591434Z",
     "iopub.status.idle": "2024-08-26T07:18:49.595285Z",
     "shell.execute_reply": "2024-08-26T07:18:49.594457Z"
    },
    "papermill": {
     "duration": 0.03436,
     "end_time": "2024-08-26T07:18:49.597102",
     "exception": false,
     "start_time": "2024-08-26T07:18:49.562742",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_3.hint()\n",
    "#q_3.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52e55fe0",
   "metadata": {
    "papermill": {
     "duration": 0.027211,
     "end_time": "2024-08-26T07:18:49.651990",
     "exception": false,
     "start_time": "2024-08-26T07:18:49.624779",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now run this cell to train the model and get the learning curves. Notice the `callbacks` argument in `model.fit`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6547bbb4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T07:18:49.708105Z",
     "iopub.status.busy": "2024-08-26T07:18:49.707810Z",
     "iopub.status.idle": "2024-08-26T07:18:52.849696Z",
     "shell.execute_reply": "2024-08-26T07:18:52.848767Z"
    },
    "papermill": {
     "duration": 3.172656,
     "end_time": "2024-08-26T07:18:52.851934",
     "exception": false,
     "start_time": "2024-08-26T07:18:49.679278",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "49/49 [==============================] - 1s 6ms/step - loss: 0.2649 - val_loss: 0.2093\n",
      "Epoch 2/50\n",
      "49/49 [==============================] - 0s 4ms/step - loss: 0.2016 - val_loss: 0.2023\n",
      "Epoch 3/50\n",
      "49/49 [==============================] - 0s 4ms/step - loss: 0.1968 - val_loss: 0.2008\n",
      "Epoch 4/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1935 - val_loss: 0.2007\n",
      "Epoch 5/50\n",
      "49/49 [==============================] - 0s 4ms/step - loss: 0.1913 - val_loss: 0.1995\n",
      "Epoch 6/50\n",
      "49/49 [==============================] - 0s 4ms/step - loss: 0.1894 - val_loss: 0.1994\n",
      "Epoch 7/50\n",
      "49/49 [==============================] - 0s 4ms/step - loss: 0.1888 - val_loss: 0.1992\n",
      "Epoch 8/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1872 - val_loss: 0.1987\n",
      "Epoch 9/50\n",
      "49/49 [==============================] - 0s 3ms/step - loss: 0.1858 - val_loss: 0.1994\n",
      "Epoch 10/50\n",
      "49/49 [==============================] - 0s 4ms/step - loss: 0.1848 - val_loss: 0.1992\n",
      "Minimum Validation Loss: 0.1987\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAnYAAAHWCAYAAAD6oMSKAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8WgzjOAAAACXBIWXMAAA9hAAAPYQGoP6dpAABafklEQVR4nO3deXxU9b3/8desSSY72QhhXxMgbBpRKtpSahXq1QvVWxW8YqxaFa9WC7U/9YpVuVqwlbZqAxQBsYgLXq2ptl5cUCNuKDGg7GtCCNn3ZWZ+f0wySchCJttMJu/n45FHknPOnPOZfAO8+X7P93sMTqfTiYiIiIj0eUZvFyAiIiIi3UPBTkRERMRPKNiJiIiI+AkFOxERERE/oWAnIiIi4icU7ERERET8hIKdiIiIiJ9QsBMRERHxE2ZvF9AZdXV1FBcXExAQgNGobCoiIiL+y+FwUF1dTXh4OGZz+9GtTwa74uJiDh8+7O0yRERERHrN8OHDiYqKaveYPhnsAgICANcbDAoK6rHr2O129u7dy9ixYzGZTD12Hekdak//ovb0L2pP/6L27F6VlZUcPnzYnX/a0yeDXcPwa1BQEDabrceuY7fbAbDZbPrF9ANqT/+i9vQvak//ovbsGR25/Uw3qImIiIj4CQU7ERERET+hYCciIiLiJxTsRERERPyEgp2IiIiIn1CwExEREfETCnYiIiIifkLBTkRERMRPKNiJiIiI+AkFOxERERE/oWAnIiIiPmvhwoU8+uij3i6jz1CwExEREfETCnYiIiIifkLBTkRERPqE4uJilixZQkpKCpMnT+amm27i8OHD7v0nTpzg1ltvJSUlhSlTpjB37lzef/9992vvuecezj//fCZNmsQll1zCK6+84qV30nPM3i5AREREvMPpdFJZa+/289rtdqrqHFTU1GEyOZvtC7KYMBgMnTrvr3/9a44cOcIzzzxDSEgIv/vd77j55pt58803sVgsPPzww9TW1vL8889js9nYv38/NpsNgKeeeooDBw6wevVqIiMjOXr0KFVVVV1+r75Gwa4NTqeT9/fmUVpSxxRvFyMiItLNnE4nP302gy+OFPbcRba+02LTucMieenWCzwOd4cPH2bbtm387W9/Y9q0aQCsWLGC73//+7zzzjtcdtllZGdn8+Mf/5hx48YBMGTIEPfrs7OzSUpKIjk5GYDBgwd39l35NA3FtiG7uIob13/B4x/34C+8iIiIF3Wu38w7Dhw4gNlsZvLkye5tkZGRjBgxggMHDgBw/fXX88wzz/Czn/2MVatW8e2337qPveaaa0hPT+eKK67giSee4Msvv+z199Ab1GPXhtBA148mu9ROUUUNUaFBXq5IRESk+xgMBl669YIeG4rdtWsXkyZNwmQyNdvXlaHYs7nqqqu48MILee+99/joo49IS0tj6dKlLFy4kIsvvph3332X999/n48++ogbbriB6667jqVLl/ZILd6iHrs2hAVaGDrAFeb2nCz1cjUiIiLdz2AwYLOae+Qj0GxsdXtnQ92oUaOoq6vj66+/dm8rLCzk0KFDjB492r0tPj6ea665hj/96U8sWrSILVu2uPcNGDCAf//3f2fFihX85je/4cUXX+z8D89HKdi1Iyk+DIA9OQp2IiIi3jR8+HB++MMf8sADD/D555/z7bff8qtf/Yq4uDh++MMfAvDoo4+yfft2jh07RlZWFjt27GDUqFGAa/LEO++8w5EjR9i3bx/vvfeee58/0VBsO5IGhvJ2Vi67c0q8XYqIiEi/t3z5ch599FFuvfVWamtrOffcc0lLS8NisQDgcDh4+OGHOXnyJCEhIcycOZP77rsPAIvFwpNPPsmJEycIDAzknHPO4cknn/Tm2+kRCnbtGK8eOxEREa/auHGj++vw8HCeeOKJNo994IEH2tx32223cdttt3Vrbb5IQ7HtSIoPBWD/qTKq67r/5lIRERGR7qRg14748EBCrAbqHE725ZZ5uxwRERGRdinYtcNgMDAiwjVur/vsRERExNcp2J3F8AjXbYi7sxXsRERExLcp2J3FcPXYiYiISB+hYHcWI+p77PZkl+B0Os9ytIiIiIj3KNidRUKoGavJQGl1HccLK71djoiIiEibFOzOwmw0MCbOtexJlu6zExERER+mYNcB4+vXs9N9diIiIuLLFOw6oOGZsZoZKyIi0vfMmjWL5557rkPHjhs3jnfeeadnC+pBCnYd0NBjt0c9diIiIuLDFOw6IHGgK9idKKqkqKLGy9WIiIiItE7BrgNCAy0MHWADdJ+diIhIb3rxxRe58MILcTgczbb/4he/4L777uPo0aP84he/YMaMGUydOpX58+fz8ccfd9v1v/vuO66//nomTZrE9OnTeeCBBygvL3fv37FjBz/96U+ZMmUK5557Lj/72c84ceIEAN9++y0LFy5k6tSpTJs2jXnz5pGZmdlttbVGwa6Dxus+OxER8TdOJ9SU98iHsa6y9X0ergl76aWXUlRUxI4dO9zbioqK2L59O//2b/9GRUUFF198Mc899xxbt25l5syZ3HrrrWRnZ3f5x1NRUUFqairh4eG8/PLL/OEPf+Djjz/mt7/9LQB1dXXcfvvtpKSk8Prrr/Piiy/yH//xHxgMBgDuvfdeBg4cyMsvv8yrr77Kz3/+cywWS5frao+5My/atGkTa9euJS8vj8TERB544AEmTZrU6rFbtmzhtddeY9++fQBMmDCBX/7yly2OP3DgAL/73e/47LPPsNvtjBo1ij/+8Y8MGjSoMyV2u/GDwngr66R67ERExD84nfDXH8OxHWc/1kMmYCrAP1rZOeR8uPEtqA8/ZxMeHs5FF13EG2+8wQUXXADA22+/TWRkJNOnT8doNJKYmOg+/q677uKdd95h27ZtLFiwoEvv4+9//zs1NTU8/vjj2GyukbsHH3yQW2+9lXvvvRez2UxpaSk/+MEPGDp0KACjRo1yvz47O5vU1FT3tuHDh3epno7wuMcuPT2d5cuXc/vtt7N161YSExNJTU0lPz+/1eN37NjB3Llz2bBhA5s3byY+Pp4bb7yR3Nxc9zFHjx7l2muvZeTIkWzcuJHXX3+d2267jYCAgM6/s26mHjsREfE/HQtX3nb55Zfzz3/+k5oa133ub7zxBnPnzsVoNFJeXs7jjz/OZZddxrnnnsvUqVM5cOBAt/TYHThwgHHjxrlDHcC0adNwOBwcOnSIiIgI5s2bR2pqKrfeeivr16/n1KlT7mMXLVrE/fffzw033EBaWhpHjx7tck1n43GP3bp167j66quZP38+AMuWLeO9997jlVde4eabb25x/MqVK5t9/8gjj/D222+TkZHBlVdeCcDvf/97LrroIpYsWeI+riH5+orxg1zBbv+pMqrr7ASYTV6uSEREpAsMBlfPWW1Ft5/abreza9cuJk2ahMl0xr+XFluHe+sazJo1i/vvv5/33nuP5ORkPv/8c+677z4AHn/8cT7++GOWLl3K0KFDCQwM5M4776S2tra73k67li9fzsKFC9m+fTv/+Mc/+MMf/sC6deuYMmUKixcv5ic/+Qnvv/8+H3zwAatWreL3v/89P/rRj3qsHo+CXU1NDVlZWdxyyy3ubUajkRkzZrBz584OnaOyspK6ujrCw8MBcDgcvPfee9x0002kpqaye/duBg8ezC233MLs2bPbPZfdbsdut3vyFjzScG673U5siIWIIAtFlbV8l1PChPqgJ31H0/aUvk/t6V/Unl5kCuz2U9qx4zAHYTcFwpnB7oxJEB1hNpuZPXs2r7/+OocPH2bEiBEkJiZit9v58ssvufLKK5k1axYA5eXlnDhxAqfT6f59cjqdzb4/a/31+WLEiBG8+uqrlJaWunvtPvvsM4xGI0OHDnWfb9y4cYwbN46bbrqJa665htdff53k5GTA1VG1cOFCFi5cyL333ssrr7zirrWjPPlz4VGwKywsxG63ExUV1Wx7VFQUBw8e7NA5VqxYQWxsLDNmzAAgPz+fiooKVq9ezV133cW9997L9u3bueOOO9iwYQPnnXdem+fau3evJ+V3WsMMliGhBooq4e0d31A7wnaWV4mv6ukZSdK71J7+Re3pX7qzPZOSklixYgXffPMNF154IV999RUAERERvP7668THx2MwGHjppZeoq6sjLy/PfUxNTQ0nTpxwf382hw4d4quvvmLo0KEYjUZuu+025s+fT0lJCatXr+bCCy/k+PHjfPnll2zbto1p06YRGRlJTk4OBw4cYNq0aXz66ads2rSJ6dOnExMTQ0FBAV988QXnnXdeh+vojE5NnuistLQ00tPT2bBhg/v+uYbpyz/84Q+54YYbAFfjffnll2zevLndYDd27Nhm497dzW63k5mZSXJyMiaTifOyvyXz1GHKLJFMmZLUY9eVnnFme0rfpvb0L2pP/9IT7Tlp0iTWrFlDTk4ON910E0OGDAHgscce4/777+fhhx8mIiKCm266CZPJRExMDFOmTAHAarWSkJDg/v5sRowY4T72ueeeY/ny5Tz44IMEBgZyySWXsGTJEoKDgzl9+jRvvPEGf/7znykqKiImJoaFCxdy++23U1dXx5YtW1izZg35+flERkYye/ZsfvWrX3k8h6CioqLDnVkeBbvIyEhMJlOLiRL5+flER0e3+9q1a9eSlpbGunXrms1eiYyMxGw2N5tFAq5ZJV988UW75zSZTL3yF0DDdSYkuIaP95ws1V88fVhv/d5I71B7+he1p3/pzvY0mUx8+OGHLbYPHTqUDRs2NNu2cOHCZt+/++67Hb7Od999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/kVDsWcoLCzEbre3GHKNiorSvVl9nMPh4LHHHmPatGmMHTvW2+VIJ7355pvs3r2bl19+2dulSBcdO3aMv/3tbyxatIhbb72VzMxMHnnkESwWC//+7//u7fLEQzfffDNlZWVcdtllmEwm7HY7d999N//2b//m7dL6FQU76TeWLVvGvn37NOzTh+Xk5PDoo4/y17/+lYCAAG+XI13kdDqZOHEiv/zlLwEYP348+/btY/PmzQp2fdA//vEP3njjDVauXMno0aPZs2cPy5cvJzY2Vu3ZixTszhAZGYnJZCI/P7/Z9vz8fKKjo71UlXTVww8/zHvvvcfzzz/PwIEDvV2OdFJWVhb5+fnMmzfPvc1ut/PZZ5+xadMmMjMz9cDxPiQmJoZRo0Y12zZy5EjefvttL1UkXfHEE09w8803M3fuXADGjRtHdnY2f/nLXxTsepGC3RmsVisTJkwgIyOD2bNnA64hvIyMDBYsWODl6sRTTqeT3/72t/zrX/9i48aNDBkyxNslSRecf/75vPHGG8223XfffYwcOZKf//znCnV9zLRp09z3YzU4fPgwCQkJXqpIuqKqqgqDwdBsm8lk0nInvUzBrhWLFi1i6dKlTJw4kUmTJrF+/XoqKyub9RJI37Bs2TL+/ve/8/TTTxMcHExeXh4AoaGhBAYGerk68VRISEiL+yNtNhsRERG6b7IP+s///E+uueYann32WS677DJ27drFli1bePjhh71dmnTCD37wA5599lkGDRrkHopdt24d8+fP93Zp/YqWO2nD888/z9q1a8nLyyMpKYn777+fyZMne7ss8VBba5wtX75cQd1PLFy4UMud9GHvvvsuTz75JIcPH2bw4MEsWrSIq6++2ttlSSeUlZXx1FNP8c4775Cfn09sbCxz587l9ttvx2q1eru8fkPBTkRERMRPaB07ERERET+hYCciIiLiJxTsRERERPyEgp2IiIiIn1CwExEREfETCnYiIiIifkLBTkRERMRPKNiJiIiI+AkFOxERERE/oWAnIiIi4icU7ERERET8hIKdiIiIiJ/4/yh3kqW5dwsvAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = keras.Sequential([\n",
    "    layers.Dense(128, activation='relu', input_shape=input_shape),\n",
    "    layers.Dense(64, activation='relu'),    \n",
    "    layers.Dense(1)\n",
    "])\n",
    "model.compile(\n",
    "    optimizer='adam',\n",
    "    loss='mae',\n",
    ")\n",
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    validation_data=(X_valid, y_valid),\n",
    "    batch_size=512,\n",
    "    epochs=50,\n",
    "    callbacks=[early_stopping]\n",
    ")\n",
    "history_df = pd.DataFrame(history.history)\n",
    "history_df.loc[:, ['loss', 'val_loss']].plot()\n",
    "print(\"Minimum Validation Loss: {:0.4f}\".format(history_df['val_loss'].min()));"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "840f88ca",
   "metadata": {
    "papermill": {
     "duration": 0.032334,
     "end_time": "2024-08-26T07:18:52.917519",
     "exception": false,
     "start_time": "2024-08-26T07:18:52.885185",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 4) Train and Interpret\n",
    "\n",
    "Was this an improvement compared to training without early stopping?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "efaad9f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T07:18:52.984881Z",
     "iopub.status.busy": "2024-08-26T07:18:52.984513Z",
     "iopub.status.idle": "2024-08-26T07:18:52.992188Z",
     "shell.execute_reply": "2024-08-26T07:18:52.991333Z"
    },
    "papermill": {
     "duration": 0.043272,
     "end_time": "2024-08-26T07:18:52.994222",
     "exception": false,
     "start_time": "2024-08-26T07:18:52.950950",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"4_Q4\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "The early stopping callback did stop the training once the network began overfitting. Moreover, by including `restore_best_weights` we still get to keep the model where validation loss was lowest."
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "The early stopping callback did stop the training once the network began overfitting. Moreover, by including `restore_best_weights` we still get to keep the model where validation loss was lowest."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# View the solution (Run this cell to receive credit!)\n",
    "q_4.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c25394a",
   "metadata": {
    "papermill": {
     "duration": 0.032009,
     "end_time": "2024-08-26T07:18:53.058441",
     "exception": false,
     "start_time": "2024-08-26T07:18:53.026432",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "If you like, try experimenting with `patience` and `min_delta` to see what difference it might make.\n",
    "\n",
    "# Keep Going #\n",
    "\n",
    "Move on to [**learn about a couple of special layers**](https://www.kaggle.com/ryanholbrook/dropout-and-batch-normalization): batch normalization and dropout."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21b39bb7",
   "metadata": {
    "papermill": {
     "duration": 0.03178,
     "end_time": "2024-08-26T07:18:53.122135",
     "exception": false,
     "start_time": "2024-08-26T07:18:53.090355",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intro-to-deep-learning/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "formats": "ipynb"
  },
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 829369,
     "sourceId": 1480608,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30648,
   "isGpuEnabled": true,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 44.19747,
   "end_time": "2024-08-26T07:18:55.886556",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-26T07:18:11.689086",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
