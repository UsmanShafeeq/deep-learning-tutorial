{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fc6e8729",
   "metadata": {
    "papermill": {
     "duration": 0.008175,
     "end_time": "2024-08-26T09:33:54.512280",
     "exception": false,
     "start_time": "2024-08-26T09:33:54.504105",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Intro to Deep Learning](https://www.kaggle.com/learn/intro-to-deep-learning) course.  You can reference the tutorial at [this link](https://www.kaggle.com/ryanholbrook/dropout-and-batch-normalization).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28a7904d",
   "metadata": {
    "papermill": {
     "duration": 0.007694,
     "end_time": "2024-08-26T09:33:54.527800",
     "exception": false,
     "start_time": "2024-08-26T09:33:54.520106",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction #\n",
    "\n",
    "In this exercise, you'll add dropout to the *Spotify* model from Exercise 4 and see how batch normalization can let you successfully train models on difficult datasets.\n",
    "\n",
    "Run the next cell to get started!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cf002336",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:33:54.545948Z",
     "iopub.status.busy": "2024-08-26T09:33:54.545478Z",
     "iopub.status.idle": "2024-08-26T09:33:55.646575Z",
     "shell.execute_reply": "2024-08-26T09:33:55.645337Z"
    },
    "papermill": {
     "duration": 1.113766,
     "end_time": "2024-08-26T09:33:55.649620",
     "exception": false,
     "start_time": "2024-08-26T09:33:54.535854",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/195640296.py:3: MatplotlibDeprecationWarning: The seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-<style>'. Alternatively, directly use the seaborn API instead.\n",
      "  plt.style.use('seaborn-whitegrid')\n"
     ]
    }
   ],
   "source": [
    "# Setup plotting\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('seaborn-whitegrid')\n",
    "# Set Matplotlib defaults\n",
    "plt.rc('figure', autolayout=True)\n",
    "plt.rc('axes', labelweight='bold', labelsize='large',\n",
    "       titleweight='bold', titlesize=18, titlepad=10)\n",
    "plt.rc('animation', html='html5')\n",
    "\n",
    "# Setup feedback system\n",
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.deep_learning_intro.ex5 import *"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eebc2322",
   "metadata": {
    "papermill": {
     "duration": 0.007964,
     "end_time": "2024-08-26T09:33:55.665930",
     "exception": false,
     "start_time": "2024-08-26T09:33:55.657966",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "First load the *Spotify* dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0dbf73b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:33:55.685214Z",
     "iopub.status.busy": "2024-08-26T09:33:55.684604Z",
     "iopub.status.idle": "2024-08-26T09:34:14.962769Z",
     "shell.execute_reply": "2024-08-26T09:34:14.961469Z"
    },
    "papermill": {
     "duration": 19.291566,
     "end_time": "2024-08-26T09:34:14.965995",
     "exception": false,
     "start_time": "2024-08-26T09:33:55.674429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-26 09:33:59.875621: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-08-26 09:33:59.875745: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-08-26 09:34:00.050350: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input shape: [18]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.compose import make_column_transformer\n",
    "from sklearn.model_selection import GroupShuffleSplit\n",
    "\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.keras import callbacks\n",
    "\n",
    "spotify = pd.read_csv('../input/dl-course-data/spotify.csv')\n",
    "\n",
    "X = spotify.copy().dropna()\n",
    "y = X.pop('track_popularity')\n",
    "artists = X['track_artist']\n",
    "\n",
    "features_num = ['danceability', 'energy', 'key', 'loudness', 'mode',\n",
    "                'speechiness', 'acousticness', 'instrumentalness',\n",
    "                'liveness', 'valence', 'tempo', 'duration_ms']\n",
    "features_cat = ['playlist_genre']\n",
    "\n",
    "preprocessor = make_column_transformer(\n",
    "    (StandardScaler(), features_num),\n",
    "    (OneHotEncoder(), features_cat),\n",
    ")\n",
    "\n",
    "def group_split(X, y, group, train_size=0.75):\n",
    "    splitter = GroupShuffleSplit(train_size=train_size)\n",
    "    train, test = next(splitter.split(X, y, groups=group))\n",
    "    return (X.iloc[train], X.iloc[test], y.iloc[train], y.iloc[test])\n",
    "\n",
    "X_train, X_valid, y_train, y_valid = group_split(X, y, artists)\n",
    "\n",
    "X_train = preprocessor.fit_transform(X_train)\n",
    "X_valid = preprocessor.transform(X_valid)\n",
    "y_train = y_train / 100\n",
    "y_valid = y_valid / 100\n",
    "\n",
    "input_shape = [X_train.shape[1]]\n",
    "print(\"Input shape: {}\".format(input_shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1547287",
   "metadata": {
    "papermill": {
     "duration": 0.007869,
     "end_time": "2024-08-26T09:34:14.982133",
     "exception": false,
     "start_time": "2024-08-26T09:34:14.974264",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1) Add Dropout to Spotify Model\n",
    "\n",
    "Here is the last model from Exercise 4. Add two dropout layers, one after the `Dense` layer with 128 units, and one after the `Dense` layer with 64 units. Set the dropout rate on both to `0.3`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1c6171c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:34:15.000226Z",
     "iopub.status.busy": "2024-08-26T09:34:14.999787Z",
     "iopub.status.idle": "2024-08-26T09:34:15.167008Z",
     "shell.execute_reply": "2024-08-26T09:34:15.165632Z"
    },
    "lines_to_next_cell": 2,
    "papermill": {
     "duration": 0.179436,
     "end_time": "2024-08-26T09:34:15.169759",
     "exception": false,
     "start_time": "2024-08-26T09:34:14.990323",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_Q1\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE: Add two 30% dropout layers, one after 128 and one after 64\n",
    "model = keras.Sequential([\n",
    "    layers.Dense(128, activation='relu', input_shape=input_shape),\n",
    "    layers.Dropout(0.3),\n",
    "    layers.Dense(64, activation='relu'),\n",
    "    layers.Dropout(0.3),\n",
    "    layers.Dense(1)\n",
    "])\n",
    "\n",
    "# Check your answer\n",
    "q_1.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aad5597f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:34:15.189479Z",
     "iopub.status.busy": "2024-08-26T09:34:15.189039Z",
     "iopub.status.idle": "2024-08-26T09:34:15.195639Z",
     "shell.execute_reply": "2024-08-26T09:34:15.194594Z"
    },
    "papermill": {
     "duration": 0.019159,
     "end_time": "2024-08-26T09:34:15.198139",
     "exception": false,
     "start_time": "2024-08-26T09:34:15.178980",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_1.hint()\n",
    "#q_1.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "976b4e8a",
   "metadata": {
    "papermill": {
     "duration": 0.008592,
     "end_time": "2024-08-26T09:34:15.215640",
     "exception": false,
     "start_time": "2024-08-26T09:34:15.207048",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now run this next cell to train the model see the effect of adding dropout."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "478ed2a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:34:15.235574Z",
     "iopub.status.busy": "2024-08-26T09:34:15.234371Z",
     "iopub.status.idle": "2024-08-26T09:34:30.660393Z",
     "shell.execute_reply": "2024-08-26T09:34:30.659163Z"
    },
    "papermill": {
     "duration": 15.439028,
     "end_time": "2024-08-26T09:34:30.663352",
     "exception": false,
     "start_time": "2024-08-26T09:34:15.224324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum Validation Loss: 0.1906\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.compile(\n",
    "    optimizer='adam',\n",
    "    loss='mae',\n",
    ")\n",
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    validation_data=(X_valid, y_valid),\n",
    "    batch_size=512,\n",
    "    epochs=50,\n",
    "    verbose=0,\n",
    ")\n",
    "history_df = pd.DataFrame(history.history)\n",
    "history_df.loc[:, ['loss', 'val_loss']].plot()\n",
    "print(\"Minimum Validation Loss: {:0.4f}\".format(history_df['val_loss'].min()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fa8fe08",
   "metadata": {
    "papermill": {
     "duration": 0.008931,
     "end_time": "2024-08-26T09:34:30.683840",
     "exception": false,
     "start_time": "2024-08-26T09:34:30.674909",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2) Evaluate Dropout\n",
    "\n",
    "Recall from Exercise 4 that this model tended to overfit the data around epoch 5. Did adding dropout seem to help prevent overfitting this time?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b6d3dd00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:34:30.704297Z",
     "iopub.status.busy": "2024-08-26T09:34:30.703856Z",
     "iopub.status.idle": "2024-08-26T09:34:30.714800Z",
     "shell.execute_reply": "2024-08-26T09:34:30.713541Z"
    },
    "papermill": {
     "duration": 0.024223,
     "end_time": "2024-08-26T09:34:30.717637",
     "exception": false,
     "start_time": "2024-08-26T09:34:30.693414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"2_Q2\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "\n",
       "From the learning curves, you can see that the validation loss remains near a constant minimum even though the training loss continues to decrease. So we can see that adding dropout did prevent overfitting this time. Moreover, by making it harder for the network to fit spurious patterns, dropout may have encouraged the network to seek out more of the true patterns, possibly improving the validation loss some as well).\n"
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "\n",
       "From the learning curves, you can see that the validation loss remains near a constant minimum even though the training loss continues to decrease. So we can see that adding dropout did prevent overfitting this time. Moreover, by making it harder for the network to fit spurious patterns, dropout may have encouraged the network to seek out more of the true patterns, possibly improving the validation loss some as well)."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# View the solution (Run this cell to receive credit!)\n",
    "q_2.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "029d2551",
   "metadata": {
    "papermill": {
     "duration": 0.009248,
     "end_time": "2024-08-26T09:34:30.736861",
     "exception": false,
     "start_time": "2024-08-26T09:34:30.727613",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now, we'll switch topics to explore how batch normalization can fix problems in training.\n",
    "\n",
    "Load the *Concrete* dataset. We won't do any standardization this time. This will make the effect of batch normalization much more apparent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a5885832",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:34:30.757691Z",
     "iopub.status.busy": "2024-08-26T09:34:30.757244Z",
     "iopub.status.idle": "2024-08-26T09:34:30.777800Z",
     "shell.execute_reply": "2024-08-26T09:34:30.776683Z"
    },
    "papermill": {
     "duration": 0.034565,
     "end_time": "2024-08-26T09:34:30.780821",
     "exception": false,
     "start_time": "2024-08-26T09:34:30.746256",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "concrete = pd.read_csv('../input/dl-course-data/concrete.csv')\n",
    "df = concrete.copy()\n",
    "\n",
    "df_train = df.sample(frac=0.7, random_state=0)\n",
    "df_valid = df.drop(df_train.index)\n",
    "\n",
    "X_train = df_train.drop('CompressiveStrength', axis=1)\n",
    "X_valid = df_valid.drop('CompressiveStrength', axis=1)\n",
    "y_train = df_train['CompressiveStrength']\n",
    "y_valid = df_valid['CompressiveStrength']\n",
    "\n",
    "input_shape = [X_train.shape[1]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ab61d52",
   "metadata": {
    "papermill": {
     "duration": 0.009386,
     "end_time": "2024-08-26T09:34:30.800056",
     "exception": false,
     "start_time": "2024-08-26T09:34:30.790670",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Run the following cell to train the network on the unstandardized *Concrete* data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "620da0e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:34:30.821085Z",
     "iopub.status.busy": "2024-08-26T09:34:30.820637Z",
     "iopub.status.idle": "2024-08-26T09:34:43.447081Z",
     "shell.execute_reply": "2024-08-26T09:34:43.445906Z"
    },
    "papermill": {
     "duration": 12.640765,
     "end_time": "2024-08-26T09:34:43.450374",
     "exception": false,
     "start_time": "2024-08-26T09:34:30.809609",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum Validation Loss: nan\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = keras.Sequential([\n",
    "    layers.Dense(512, activation='relu', input_shape=input_shape),\n",
    "    layers.Dense(512, activation='relu'),    \n",
    "    layers.Dense(512, activation='relu'),\n",
    "    layers.Dense(1),\n",
    "])\n",
    "model.compile(\n",
    "    optimizer='sgd', # SGD is more sensitive to differences of scale\n",
    "    loss='mae',\n",
    "    metrics=['mae'],\n",
    ")\n",
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    validation_data=(X_valid, y_valid),\n",
    "    batch_size=64,\n",
    "    epochs=100,\n",
    "    verbose=0,\n",
    ")\n",
    "\n",
    "history_df = pd.DataFrame(history.history)\n",
    "history_df.loc[0:, ['loss', 'val_loss']].plot()\n",
    "print((\"Minimum Validation Loss: {:0.4f}\").format(history_df['val_loss'].min()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4eca3b1f",
   "metadata": {
    "papermill": {
     "duration": 0.009583,
     "end_time": "2024-08-26T09:34:43.470274",
     "exception": false,
     "start_time": "2024-08-26T09:34:43.460691",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Did you end up with a blank graph? Trying to train this network on this dataset will usually fail. Even when it does converge (due to a lucky weight initialization), it tends to converge to a very large number.\n",
    "\n",
    "# 3) Add Batch Normalization Layers\n",
    "\n",
    "Batch normalization can help correct problems like this.\n",
    "\n",
    "Add four `BatchNormalization` layers, one before each of the dense layers. (Remember to move the `input_shape` argument to the new first layer.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "90bf419c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:34:43.492193Z",
     "iopub.status.busy": "2024-08-26T09:34:43.491770Z",
     "iopub.status.idle": "2024-08-26T09:34:43.684040Z",
     "shell.execute_reply": "2024-08-26T09:34:43.682819Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.206179,
     "end_time": "2024-08-26T09:34:43.686644",
     "exception": false,
     "start_time": "2024-08-26T09:34:43.480465",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_Q3\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE: Add a BatchNormalization layer before each Dense layer\n",
    "\n",
    "model = keras.Sequential([\n",
    "    layers.BatchNormalization(input_shape=input_shape),\n",
    "    layers.Dense(512, activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dense(512, activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dense(512, activation='relu'),\n",
    "    layers.BatchNormalization(),\n",
    "    layers.Dense(1),\n",
    "])\n",
    "\n",
    "# Check your answer\n",
    "q_3.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6fe9de1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:34:43.709261Z",
     "iopub.status.busy": "2024-08-26T09:34:43.708715Z",
     "iopub.status.idle": "2024-08-26T09:34:43.714297Z",
     "shell.execute_reply": "2024-08-26T09:34:43.712827Z"
    },
    "papermill": {
     "duration": 0.020032,
     "end_time": "2024-08-26T09:34:43.717040",
     "exception": false,
     "start_time": "2024-08-26T09:34:43.697008",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Lines below will give you a hint or solution code\n",
    "#q_3.hint()\n",
    "#q_3.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04ed7e6e",
   "metadata": {
    "papermill": {
     "duration": 0.01045,
     "end_time": "2024-08-26T09:34:43.737779",
     "exception": false,
     "start_time": "2024-08-26T09:34:43.727329",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Run the next cell to see if batch normalization will let us train the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d6785691",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:34:43.760899Z",
     "iopub.status.busy": "2024-08-26T09:34:43.760485Z",
     "iopub.status.idle": "2024-08-26T09:34:59.732918Z",
     "shell.execute_reply": "2024-08-26T09:34:59.731535Z"
    },
    "papermill": {
     "duration": 15.986974,
     "end_time": "2024-08-26T09:34:59.735670",
     "exception": false,
     "start_time": "2024-08-26T09:34:43.748696",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Minimum Validation Loss: 4.0740\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.compile(\n",
    "    optimizer='sgd',\n",
    "    loss='mae',\n",
    "    metrics=['mae'],\n",
    ")\n",
    "EPOCHS = 100\n",
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    validation_data=(X_valid, y_valid),\n",
    "    batch_size=64,\n",
    "    epochs=EPOCHS,\n",
    "    verbose=0,\n",
    ")\n",
    "\n",
    "history_df = pd.DataFrame(history.history)\n",
    "history_df.loc[0:, ['loss', 'val_loss']].plot()\n",
    "print((\"Minimum Validation Loss: {:0.4f}\").format(history_df['val_loss'].min()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "276c7a77",
   "metadata": {
    "papermill": {
     "duration": 0.010921,
     "end_time": "2024-08-26T09:34:59.757732",
     "exception": false,
     "start_time": "2024-08-26T09:34:59.746811",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 4) Evaluate Batch Normalization\n",
    "\n",
    "Did adding batch normalization help?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1776fff7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T09:34:59.781730Z",
     "iopub.status.busy": "2024-08-26T09:34:59.781301Z",
     "iopub.status.idle": "2024-08-26T09:34:59.791196Z",
     "shell.execute_reply": "2024-08-26T09:34:59.789961Z"
    },
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.024749,
     "end_time": "2024-08-26T09:34:59.793695",
     "exception": false,
     "start_time": "2024-08-26T09:34:59.768946",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"questionType\": 4, \"questionId\": \"4_Q4\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "\n",
       "You can see that adding batch normalization was a big improvement on the first attempt! By adaptively scaling the data as it passes through the network, batch normalization can let you train models on difficult datasets.\n"
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "\n",
       "You can see that adding batch normalization was a big improvement on the first attempt! By adaptively scaling the data as it passes through the network, batch normalization can let you train models on difficult datasets."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# View the solution (Run this cell to receive credit!)\n",
    "q_4.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e777222",
   "metadata": {
    "papermill": {
     "duration": 0.011134,
     "end_time": "2024-08-26T09:34:59.816269",
     "exception": false,
     "start_time": "2024-08-26T09:34:59.805135",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Keep Going #\n",
    "\n",
    "[**Create neural networks**](https://www.kaggle.com/ryanholbrook/binary-classification) for binary classification."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a42acb57",
   "metadata": {
    "papermill": {
     "duration": 0.010882,
     "end_time": "2024-08-26T09:34:59.838371",
     "exception": false,
     "start_time": "2024-08-26T09:34:59.827489",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intro-to-deep-learning/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "formats": "ipynb"
  },
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 829369,
     "sourceId": 1480608,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30648,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 71.796654,
   "end_time": "2024-08-26T09:35:02.462272",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-26T09:33:50.665618",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
