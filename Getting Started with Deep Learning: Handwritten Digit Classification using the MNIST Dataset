{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "168c3a76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T08:57:37.609960Z",
     "iopub.status.busy": "2024-08-29T08:57:37.609504Z",
     "iopub.status.idle": "2024-08-29T08:57:55.259414Z",
     "shell.execute_reply": "2024-08-29T08:57:55.257554Z"
    },
    "papermill": {
     "duration": 17.663793,
     "end_time": "2024-08-29T08:57:55.263101",
     "exception": false,
     "start_time": "2024-08-29T08:57:37.599308",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: tensorflow in /opt/conda/lib/python3.10/site-packages (2.16.1)\r\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (1.26.4)\r\n",
      "Requirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (3.7.5)\r\n",
      "Requirement already satisfied: absl-py>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.4.0)\r\n",
      "Requirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.6.3)\r\n",
      "Requirement already satisfied: flatbuffers>=23.5.26 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (24.3.25)\r\n",
      "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.5.4)\r\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.2.0)\r\n",
      "Requirement already satisfied: h5py>=3.10.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.11.0)\r\n",
      "Requirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (18.1.1)\r\n",
      "Requirement already satisfied: ml-dtypes~=0.3.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.3.2)\r\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.3.0)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from tensorflow) (21.3)\r\n",
      "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.20.3)\r\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.32.3)\r\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow) (70.0.0)\r\n",
      "Requirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.16.0)\r\n",
      "Requirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.4.0)\r\n",
      "Requirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (4.12.2)\r\n",
      "Requirement already satisfied: wrapt>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.16.0)\r\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.64.1)\r\n",
      "Requirement already satisfied: tensorboard<2.17,>=2.16 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.16.2)\r\n",
      "Requirement already satisfied: keras>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.3.3)\r\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.37.0)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.2.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (4.53.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.4.5)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (9.5.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (3.1.2)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (2.9.0.post0)\r\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow) (0.43.0)\r\n",
      "Requirement already satisfied: rich in /opt/conda/lib/python3.10/site-packages (from keras>=3.0.0->tensorflow) (13.7.1)\r\n",
      "Requirement already satisfied: namex in /opt/conda/lib/python3.10/site-packages (from keras>=3.0.0->tensorflow) (0.0.8)\r\n",
      "Requirement already satisfied: optree in /opt/conda/lib/python3.10/site-packages (from keras>=3.0.0->tensorflow) (0.11.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow) (3.7)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow) (2024.7.4)\r\n",
      "Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.17,>=2.16->tensorflow) (3.6)\r\n",
      "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.17,>=2.16->tensorflow) (0.7.2)\r\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.17,>=2.16->tensorflow) (3.0.3)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.17,>=2.16->tensorflow) (2.1.5)\r\n",
      "Requirement already satisfied: markdown-it-py>=2.2.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras>=3.0.0->tensorflow) (3.0.0)\r\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras>=3.0.0->tensorflow) (2.18.0)\r\n",
      "Requirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.10/site-packages (from markdown-it-py>=2.2.0->rich->keras>=3.0.0->tensorflow) (0.1.2)\r\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install tensorflow numpy matplotlib"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f7c730d",
   "metadata": {
    "papermill": {
     "duration": 0.008519,
     "end_time": "2024-08-29T08:57:55.281806",
     "exception": false,
     "start_time": "2024-08-29T08:57:55.273287",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Getting Started with Deep Learning: Handwritten Digit Classification using the MNIST Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f19dd5b3",
   "metadata": {
    "papermill": {
     "duration": 0.009044,
     "end_time": "2024-08-29T08:57:55.300145",
     "exception": false,
     "start_time": "2024-08-29T08:57:55.291101",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 2: Import the Necessary Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "770e0ba8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T08:57:55.321433Z",
     "iopub.status.busy": "2024-08-29T08:57:55.320937Z",
     "iopub.status.idle": "2024-08-29T08:58:11.254604Z",
     "shell.execute_reply": "2024-08-29T08:58:11.252937Z"
    },
    "papermill": {
     "duration": 15.948331,
     "end_time": "2024-08-29T08:58:11.258004",
     "exception": false,
     "start_time": "2024-08-29T08:57:55.309673",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers, models\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bb49201",
   "metadata": {
    "papermill": {
     "duration": 0.008378,
     "end_time": "2024-08-29T08:58:11.275370",
     "exception": false,
     "start_time": "2024-08-29T08:58:11.266992",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 3: Load and Explore the MNIST Dataset\n",
    "##### The MNIST dataset contains 70,000 images of handwritten digits (0-9), each of size 28x28 pixels. TensorFlow includes this dataset, so you can load it directly:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "70196a8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T08:58:11.296668Z",
     "iopub.status.busy": "2024-08-29T08:58:11.295910Z",
     "iopub.status.idle": "2024-08-29T08:58:11.302288Z",
     "shell.execute_reply": "2024-08-29T08:58:11.300927Z"
    },
    "papermill": {
     "duration": 0.020271,
     "end_time": "2024-08-29T08:58:11.305461",
     "exception": false,
     "start_time": "2024-08-29T08:58:11.285190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load the dataset\n",
    "mnist = tf.keras.datasets.mnist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1734ed28",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T08:58:11.326344Z",
     "iopub.status.busy": "2024-08-29T08:58:11.325900Z",
     "iopub.status.idle": "2024-08-29T08:58:13.806763Z",
     "shell.execute_reply": "2024-08-29T08:58:13.805584Z"
    },
    "papermill": {
     "duration": 2.494837,
     "end_time": "2024-08-29T08:58:13.809706",
     "exception": false,
     "start_time": "2024-08-29T08:58:11.314869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
      "\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 0us/step\n"
     ]
    }
   ],
   "source": [
    "# Split into training and testing data\n",
    "(x_train, y_train), (x_test, y_test) = mnist.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c579bd78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T08:58:13.834264Z",
     "iopub.status.busy": "2024-08-29T08:58:13.833165Z",
     "iopub.status.idle": "2024-08-29T08:58:14.032506Z",
     "shell.execute_reply": "2024-08-29T08:58:14.031390Z"
    },
    "papermill": {
     "duration": 0.214327,
     "end_time": "2024-08-29T08:58:14.035163",
     "exception": false,
     "start_time": "2024-08-29T08:58:13.820836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Normalize the images to [0, 1] range\n",
    "x_train,x_test = x_train /255.0,x_test/255.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "22f5bceb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T08:58:14.060223Z",
     "iopub.status.busy": "2024-08-29T08:58:14.059791Z",
     "iopub.status.idle": "2024-08-29T08:58:14.066082Z",
     "shell.execute_reply": "2024-08-29T08:58:14.064795Z"
    },
    "papermill": {
     "duration": 0.022548,
     "end_time": "2024-08-29T08:58:14.069302",
     "exception": false,
     "start_time": "2024-08-29T08:58:14.046754",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data shape: (60000, 28, 28)\n",
      "Training data shape: (10000, 28, 28)\n"
     ]
    }
   ],
   "source": [
    "# Check the shape of the data\n",
    "print(\"Training data shape:\",x_train.shape)\n",
    "print(\"Training data shape:\",x_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0158a0ba",
   "metadata": {
    "papermill": {
     "duration": 0.010524,
     "end_time": "2024-08-29T08:58:14.090776",
     "exception": false,
     "start_time": "2024-08-29T08:58:14.080252",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 4: Visualize the Data\n",
    "##### It's always good to visualize the data you're working with:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "466983fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T08:58:14.114835Z",
     "iopub.status.busy": "2024-08-29T08:58:14.114359Z",
     "iopub.status.idle": "2024-08-29T08:58:15.509931Z",
     "shell.execute_reply": "2024-08-29T08:58:15.508196Z"
    },
    "papermill": {
     "duration": 1.412426,
     "end_time": "2024-08-29T08:58:15.514348",
     "exception": false,
     "start_time": "2024-08-29T08:58:14.101922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5))\n",
    "for i in range(10):\n",
    "    plt.subplot(2,5,i+1)\n",
    "    plt.imshow(x_train[i], cmap='gray')\n",
    "    plt.title(f\"Label: {y_train[i]}\")\n",
    "    plt.axis('off')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5905f17f",
   "metadata": {
    "papermill": {
     "duration": 0.012998,
     "end_time": "2024-08-29T08:58:15.551850",
     "exception": false,
     "start_time": "2024-08-29T08:58:15.538852",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 5: Build the Neural Network Model\n",
    "#####  We'll build a simple feedforward neural network using TensorFlow:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "453d8a3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T08:58:15.579857Z",
     "iopub.status.busy": "2024-08-29T08:58:15.579436Z",
     "iopub.status.idle": "2024-08-29T08:58:15.672409Z",
     "shell.execute_reply": "2024-08-29T08:58:15.671156Z"
    },
    "papermill": {
     "duration": 0.110135,
     "end_time": "2024-08-29T08:58:15.675138",
     "exception": false,
     "start_time": "2024-08-29T08:58:15.565003",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/layers/reshaping/flatten.py:37: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    }
   ],
   "source": [
    "model = models.Sequential([\n",
    "    layers.Flatten(input_shape=(28, 28)),  # Flatten the input images\n",
    "    layers.Dense(128, activation='relu'),  # First hidden layer\n",
    "    layers.Dropout(0.2),  # Dropout layer to prevent overfitting\n",
    "    layers.Dense(10, activation='softmax')  # Output layer with 10 classes\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b9971fd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T08:58:15.703533Z",
     "iopub.status.busy": "2024-08-29T08:58:15.703060Z",
     "iopub.status.idle": "2024-08-29T08:58:15.719802Z",
     "shell.execute_reply": "2024-08-29T08:58:15.718537Z"
    },
    "papermill": {
     "duration": 0.03454,
     "end_time": "2024-08-29T08:58:15.722743",
     "exception": false,
     "start_time": "2024-08-29T08:58:15.688203",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Compile the model\n",
    "model.compile(optimizer='adam',\n",
    "             loss='sparse_categorical_crossentropy',\n",
    "             metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e567a84",
   "metadata": {
    "papermill": {
     "duration": 0.012905,
     "end_time": "2024-08-29T08:58:15.748778",
     "exception": false,
     "start_time": "2024-08-29T08:58:15.735873",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 6: Train the Model\n",
    "##### Now, we'll train the model on the training data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ebedc31e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T08:58:15.777094Z",
     "iopub.status.busy": "2024-08-29T08:58:15.776648Z",
     "iopub.status.idle": "2024-08-29T08:58:43.269779Z",
     "shell.execute_reply": "2024-08-29T08:58:43.268586Z"
    },
    "papermill": {
     "duration": 27.510754,
     "end_time": "2024-08-29T08:58:43.272592",
     "exception": false,
     "start_time": "2024-08-29T08:58:15.761838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 4ms/step - accuracy: 0.8446 - loss: 0.5369 - val_accuracy: 0.9517 - val_loss: 0.1604\n",
      "Epoch 2/5\n",
      "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9505 - loss: 0.1655 - val_accuracy: 0.9648 - val_loss: 0.1180\n",
      "Epoch 3/5\n",
      "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9645 - loss: 0.1165 - val_accuracy: 0.9695 - val_loss: 0.0973\n",
      "Epoch 4/5\n",
      "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9721 - loss: 0.0899 - val_accuracy: 0.9739 - val_loss: 0.0899\n",
      "Epoch 5/5\n",
      "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9742 - loss: 0.0813 - val_accuracy: 0.9751 - val_loss: 0.0894\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(x_train, y_train, epochs=5, validation_split=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0377e1f1",
   "metadata": {
    "papermill": {
     "duration": 0.055295,
     "end_time": "2024-08-29T08:58:43.387197",
     "exception": false,
     "start_time": "2024-08-29T08:58:43.331902",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 7: Evaluate the Model\n",
    "###### After training, we evaluate the model on the test data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "77231a3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T08:58:43.501116Z",
     "iopub.status.busy": "2024-08-29T08:58:43.500656Z",
     "iopub.status.idle": "2024-08-29T08:58:44.249614Z",
     "shell.execute_reply": "2024-08-29T08:58:44.248395Z"
    },
    "papermill": {
     "duration": 0.808828,
     "end_time": "2024-08-29T08:58:44.252527",
     "exception": false,
     "start_time": "2024-08-29T08:58:43.443699",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9691 - loss: 0.0997\n"
     ]
    }
   ],
   "source": [
    "test_loss, test_acc = model.evaluate(x_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b2c886a",
   "metadata": {
    "papermill": {
     "duration": 0.058526,
     "end_time": "2024-08-29T08:58:44.372832",
     "exception": false,
     "start_time": "2024-08-29T08:58:44.314306",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 8: Make Predictions\n",
    "###### Let's make some predictions with the trained model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0f9d8c4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T08:58:44.511234Z",
     "iopub.status.busy": "2024-08-29T08:58:44.510807Z",
     "iopub.status.idle": "2024-08-29T08:58:45.316252Z",
     "shell.execute_reply": "2024-08-29T08:58:45.315147Z"
    },
    "papermill": {
     "duration": 0.873815,
     "end_time": "2024-08-29T08:58:45.318904",
     "exception": false,
     "start_time": "2024-08-29T08:58:44.445089",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n"
     ]
    }
   ],
   "source": [
    "predictions = model.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2c0677d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T08:58:45.436027Z",
     "iopub.status.busy": "2024-08-29T08:58:45.435585Z",
     "iopub.status.idle": "2024-08-29T08:58:45.555671Z",
     "shell.execute_reply": "2024-08-29T08:58:45.554516Z"
    },
    "papermill": {
     "duration": 0.180719,
     "end_time": "2024-08-29T08:58:45.558145",
     "exception": false,
     "start_time": "2024-08-29T08:58:45.377426",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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oEGlvb293HfffXl/d3d3mTFjRmltbS21Wm2Tj6f25hpLqf6R1MmTJ5fm5uby/fff1z0D9aqV8qf9LQA7NO8pAJBEAYAkCgAkUQAgiQIASRQASHX/8Vo9V5EEYNtVz18g2CkAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKAKSm/l7AjmDSpEmVZ6ZOndrQuVavXl15Zt26dZVn5s6dW3nm66+/rjwTEfH55583NAdUZ6cAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgCkWiml1HVgrdbXa9luffHFF5Vn9t9//95fSD/7+eefG5pbunRpL6+E3rZq1arKM3feeWdD53r33XcbmiOinqd7OwUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKAKSm/l7AjmDq1KmVZ9rb2xs618cff1x55rDDDqs8c/TRR1eeGTduXOWZiIjjjz++8szKlSsrz4wcObLyzNbU3d1deWbNmjWVZ0aMGFF5phFfffVVQ3MuiNe37BQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBqpZRS14G1Wl+vhe3c0KFDG5o78sgjK8+89957lWeOPfbYyjNb07p16yrPfPbZZ5VnGrmo4h577FF5Zvr06ZVnIiLmzJnT0BwR9Tzd2ykAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACC5IB5sx84777zKM48//njlmc7Ozsozp5xySuWZiIgffvihoTlcEA+AikQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgDJVVLhP2L48OGVZz766KOtcp5JkyZVnnniiScqz/DvuEoqAJWIAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAaurvBQD1mT59euWZ1tbWyjNr166tPPPpp59WnmHbZKcAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYBUK6WUug6s1fp6LbBDOOGEExqae+mllyrPNDc3V54ZN25c5ZlXX3218gxbXz1P93YKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABITf29ANjRdHR0NDTXyMXtXnzxxcozb775ZuUZth92CgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASC6IB/9CS0tL5ZkJEyY0dK7169dXnrn55psrz/z++++VZ9h+2CkAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgDJVVLhX7juuusqzxx11FENneu5556rPPPGG280dC52XHYKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABItVJKqevAWq2v1wL96uyzz64889RTT1We+fXXXyvPRERMmDCh8sxbb73V0LnYPtXzdG+nAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGA1NTfC4C+MGzYsMoz9957b+WZnXbaqfLM/PnzK89EuLgdW4edAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAUq2UUuo6sFbr67XAZjVy0blGLh43ZsyYyjNdXV2VZyZMmFB5ptFzwZ/V83RvpwBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgNTU3wuAf3LggQdWnmnk4naNuOaaayrPuLAd2zI7BQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAILlKKltNW1tbQ3MvvPBCL69k86677rrKM88880wfrAT6j50CAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSC+Kx1Vx22WUNze233369vJLNe+WVVyrPlFL6YCXQf+wUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQXBCPhowdO7byzIwZM/pgJUBvslMAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEByQTwacuKJJ1aeGTx4cB+sZPO6uroqz/zyyy99sBL4b7FTACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkqukss378MMPK8+cdtpplWd++OGHyjOwvbFTACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAqpVSSl0H1mp9vRYA+lA9T/d2CgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASE31HljndfMA+A+zUwAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAg/Q+Gu03hLQAWjQAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Display the first test image and the model's prediction\n",
    "plt.imshow(x_test[0],cmap='gray')\n",
    "plt.title(f\"Predicted: {np.argmax(predictions[0])}\")\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3b951da",
   "metadata": {
    "papermill": {
     "duration": 0.056642,
     "end_time": "2024-08-29T08:58:45.673946",
     "exception": false,
     "start_time": "2024-08-29T08:58:45.617304",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 9: Analyze the Results\n",
    "###### You can visualize the training process, such as the accuracy and loss over epochs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2f52ad4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T08:58:45.790484Z",
     "iopub.status.busy": "2024-08-29T08:58:45.790036Z",
     "iopub.status.idle": "2024-08-29T08:58:46.305777Z",
     "shell.execute_reply": "2024-08-29T08:58:46.304488Z"
    },
    "papermill": {
     "duration": 0.577249,
     "end_time": "2024-08-29T08:58:46.308258",
     "exception": false,
     "start_time": "2024-08-29T08:58:45.731009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot training & validation accuracy values\n",
    "plt.figure(figsize=(12, 4))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('Model accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend(['Train', 'Validation'], loc='upper left')\n",
    "\n",
    "# Plot training & validation loss values\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('Model loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend(['Train', 'Validation'], loc='upper left')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cf2029e",
   "metadata": {
    "papermill": {
     "duration": 0.05771,
     "end_time": "2024-08-29T08:58:46.424519",
     "exception": false,
     "start_time": "2024-08-29T08:58:46.366809",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Step 10: Further Steps and Learning Resources\n",
    "\n",
    "## Further Steps\n",
    "\n",
    "After completing this project, consider exploring more advanced topics to enhance your skills and deepen your understanding:\n",
    "\n",
    "1. **Data Augmentation:** \n",
    "   - Learn techniques like rotation, zoom, and shift to artificially expand your dataset and improve model generalization.\n",
    "\n",
    "2. **Convolutional Neural Networks (CNNs):** \n",
    "   - Dive into CNNs, which are especially powerful for handling image data, and explore their architecture and applications.\n",
    "\n",
    "3. **Hyperparameter Tuning:** \n",
    "   - Experiment with different model architectures, learning rates, optimizers, batch sizes, and other hyperparameters to optimize performance.\n",
    "\n",
    "4. **Transfer Learning:** \n",
    "   - Utilize pre-trained models (like VGG16, ResNet, etc.) for your tasks, allowing you to build on the knowledge from models trained on large datasets.\n",
    "\n",
    "## Additional Learning Resources\n",
    "\n",
    "To further your learning, here are some highly recommended books and online courses:\n",
    "\n",
    "### Books:\n",
    "- **\"Deep Learning with Python\" by François Chollet:** \n",
    "   - Written by the creator of Keras, this book provides an excellent introduction to deep learning and neural networks.\n",
    "\n",
    "- **\"Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow\" by Aurélien Géron:** \n",
    "   - A comprehensive guide to building machine learning models, covering essential concepts and practical implementations.\n",
    "\n",
    "### Online Courses:\n",
    "- **Coursera's Deep Learning Specialization by Andrew Ng:**\n",
    "   - A series of courses that cover the foundations of deep learning, offered by one of the pioneers in the field.\n",
    "\n",
    "- **Fast.ai's Practical Deep Learning for Coders:**\n",
    "   - A hands-on course that emphasizes building and deploying deep learning models quickly and effectively.\n",
    "\n",
    "By following these steps and utilizing these resources, you'll build a solid foundation in deep learning and be well-equipped to tackle more complex projects in the future.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74a6b37e",
   "metadata": {
    "papermill": {
     "duration": 0.057462,
     "end_time": "2024-08-29T08:58:46.539889",
     "exception": false,
     "start_time": "2024-08-29T08:58:46.482427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 74.5417,
   "end_time": "2024-08-29T08:58:49.157617",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-29T08:57:34.615917",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
